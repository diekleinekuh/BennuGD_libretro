# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Zig Cross Compile

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      matrix:
        target:
          - x86_64-linux-gnu
          - aarch64-linux-gnu
          - x86_64-windows-gnu
          - arm-linux-gnueabihf
        build_type: [Release]

    steps:
    - uses: actions/checkout@v4
    - uses: mlugg/setup-zig@a67e68dc5c8281d9608136d3d7ca1b282213e4ac
      with:
        version: 0.14.0

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/cmake/zig.toolchain.${{ matrix.target }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Achive build results
      uses: actions/upload-artifact@v4
      with:
        name: bennugd_libretro.${{ matrix.target }}.${{ matrix.build_type }}
        path: ${{ steps.strings.outputs.build-output-dir }}/bennugd_libretro*.*
  master-branch-release:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
    if: github.ref == 'refs/heads/master'
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
    - uses: actions/checkout@v4
    - name: delete previous release
      shell: bash
      run: |
        gh release delete mainline-latest --yes --cleanup-tag || true
    - name: download artifacts
      uses: actions/download-artifact@v4
    - name: compress artifacts
      shell: bash
      run: |
        for d in ./bennugd_libretro.*.*/ ; do (cd "$d" && tar czvf "../$(basename $d).tgz" .); done
    - name: create new release
      shell: bash
      run: |
        gh release create mainline-latest --latest=false --title "Mainline latest" --notes "Latest manline release" --target ${{ github.sha }} --prerelease=true ./bennugd_libretro.*.*.tgz
